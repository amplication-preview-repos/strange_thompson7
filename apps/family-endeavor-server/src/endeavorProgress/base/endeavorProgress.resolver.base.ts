/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EndeavorProgress } from "./EndeavorProgress";
import { EndeavorProgressFindManyArgs } from "./EndeavorProgressFindManyArgs";
import { EndeavorProgressFindUniqueArgs } from "./EndeavorProgressFindUniqueArgs";
import { Kid } from "../../kid/base/Kid";
import { Endeavor } from "../../endeavor/base/Endeavor";
import { EndeavorProgressService } from "../endeavorProgress.service";
@graphql.Resolver(() => EndeavorProgress)
export class EndeavorProgressResolverBase {
  constructor(protected readonly service: EndeavorProgressService) {}

  @graphql.Query(() => [EndeavorProgress])
  async endeavorProgresses(
    @graphql.Args() args: EndeavorProgressFindManyArgs
  ): Promise<EndeavorProgress[]> {
    return this.service.endeavorProgresses(args);
  }

  @graphql.Query(() => EndeavorProgress, { nullable: true })
  async endeavorProgress(
    @graphql.Args() args: EndeavorProgressFindUniqueArgs
  ): Promise<EndeavorProgress | null> {
    const result = await this.service.endeavorProgress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Kid, {
    nullable: true,
    name: "kid",
  })
  async getKid(
    @graphql.Parent() parent: EndeavorProgress
  ): Promise<Kid | null> {
    const result = await this.service.getKid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Endeavor, {
    nullable: true,
    name: "endeavor",
  })
  async getEndeavor(
    @graphql.Parent() parent: EndeavorProgress
  ): Promise<Endeavor | null> {
    const result = await this.service.getEndeavor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
