/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Prize as PrismaPrize,
  PrizeProgress as PrismaPrizeProgress,
} from "@prisma/client";

export class PrizeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PrizeCountArgs, "select">): Promise<number> {
    return this.prisma.prize.count(args);
  }

  async prizes(args: Prisma.PrizeFindManyArgs): Promise<PrismaPrize[]> {
    return this.prisma.prize.findMany(args);
  }
  async prize(args: Prisma.PrizeFindUniqueArgs): Promise<PrismaPrize | null> {
    return this.prisma.prize.findUnique(args);
  }
  async createPrize(args: Prisma.PrizeCreateArgs): Promise<PrismaPrize> {
    return this.prisma.prize.create(args);
  }
  async updatePrize(args: Prisma.PrizeUpdateArgs): Promise<PrismaPrize> {
    return this.prisma.prize.update(args);
  }
  async deletePrize(args: Prisma.PrizeDeleteArgs): Promise<PrismaPrize> {
    return this.prisma.prize.delete(args);
  }

  async findPrizeProgresses(
    parentId: string,
    args: Prisma.PrizeProgressFindManyArgs
  ): Promise<PrismaPrizeProgress[]> {
    return this.prisma.prize
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .prizeProgresses(args);
  }
}
