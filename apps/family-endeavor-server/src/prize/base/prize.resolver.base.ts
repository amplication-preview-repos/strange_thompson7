/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Prize } from "./Prize";
import { PrizeCountArgs } from "./PrizeCountArgs";
import { PrizeFindManyArgs } from "./PrizeFindManyArgs";
import { PrizeFindUniqueArgs } from "./PrizeFindUniqueArgs";
import { CreatePrizeArgs } from "./CreatePrizeArgs";
import { UpdatePrizeArgs } from "./UpdatePrizeArgs";
import { DeletePrizeArgs } from "./DeletePrizeArgs";
import { PrizeProgressFindManyArgs } from "../../prizeProgress/base/PrizeProgressFindManyArgs";
import { PrizeProgress } from "../../prizeProgress/base/PrizeProgress";
import { PrizeService } from "../prize.service";
@graphql.Resolver(() => Prize)
export class PrizeResolverBase {
  constructor(protected readonly service: PrizeService) {}

  async _prizesMeta(
    @graphql.Args() args: PrizeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Prize])
  async prizes(@graphql.Args() args: PrizeFindManyArgs): Promise<Prize[]> {
    return this.service.prizes(args);
  }

  @graphql.Query(() => Prize, { nullable: true })
  async prize(
    @graphql.Args() args: PrizeFindUniqueArgs
  ): Promise<Prize | null> {
    const result = await this.service.prize(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Prize)
  async createPrize(@graphql.Args() args: CreatePrizeArgs): Promise<Prize> {
    return await this.service.createPrize({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Prize)
  async updatePrize(
    @graphql.Args() args: UpdatePrizeArgs
  ): Promise<Prize | null> {
    try {
      return await this.service.updatePrize({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Prize)
  async deletePrize(
    @graphql.Args() args: DeletePrizeArgs
  ): Promise<Prize | null> {
    try {
      return await this.service.deletePrize(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PrizeProgress], { name: "prizeProgresses" })
  async findPrizeProgresses(
    @graphql.Parent() parent: Prize,
    @graphql.Args() args: PrizeProgressFindManyArgs
  ): Promise<PrizeProgress[]> {
    const results = await this.service.findPrizeProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
