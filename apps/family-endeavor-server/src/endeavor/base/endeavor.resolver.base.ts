/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Endeavor } from "./Endeavor";
import { EndeavorCountArgs } from "./EndeavorCountArgs";
import { EndeavorFindManyArgs } from "./EndeavorFindManyArgs";
import { EndeavorFindUniqueArgs } from "./EndeavorFindUniqueArgs";
import { CreateEndeavorArgs } from "./CreateEndeavorArgs";
import { UpdateEndeavorArgs } from "./UpdateEndeavorArgs";
import { DeleteEndeavorArgs } from "./DeleteEndeavorArgs";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { EndeavorProgressFindManyArgs } from "../../endeavorProgress/base/EndeavorProgressFindManyArgs";
import { EndeavorProgress } from "../../endeavorProgress/base/EndeavorProgress";
import { Reward } from "../../reward/base/Reward";
import { EndeavorService } from "../endeavor.service";
@graphql.Resolver(() => Endeavor)
export class EndeavorResolverBase {
  constructor(protected readonly service: EndeavorService) {}

  async _endeavorsMeta(
    @graphql.Args() args: EndeavorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Endeavor])
  async endeavors(
    @graphql.Args() args: EndeavorFindManyArgs
  ): Promise<Endeavor[]> {
    return this.service.endeavors(args);
  }

  @graphql.Query(() => Endeavor, { nullable: true })
  async endeavor(
    @graphql.Args() args: EndeavorFindUniqueArgs
  ): Promise<Endeavor | null> {
    const result = await this.service.endeavor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Endeavor)
  async createEndeavor(
    @graphql.Args() args: CreateEndeavorArgs
  ): Promise<Endeavor> {
    return await this.service.createEndeavor({
      ...args,
      data: {
        ...args.data,

        reward: args.data.reward
          ? {
              connect: args.data.reward,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Endeavor)
  async updateEndeavor(
    @graphql.Args() args: UpdateEndeavorArgs
  ): Promise<Endeavor | null> {
    try {
      return await this.service.updateEndeavor({
        ...args,
        data: {
          ...args.data,

          reward: args.data.reward
            ? {
                connect: args.data.reward,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Endeavor)
  async deleteEndeavor(
    @graphql.Args() args: DeleteEndeavorArgs
  ): Promise<Endeavor | null> {
    try {
      return await this.service.deleteEndeavor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Progress], { name: "progresses" })
  async findProgresses(
    @graphql.Parent() parent: Endeavor,
    @graphql.Args() args: ProgressFindManyArgs
  ): Promise<Progress[]> {
    const results = await this.service.findProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EndeavorProgress], {
    name: "endeavorProgresses",
  })
  async findEndeavorProgresses(
    @graphql.Parent() parent: Endeavor,
    @graphql.Args() args: EndeavorProgressFindManyArgs
  ): Promise<EndeavorProgress[]> {
    const results = await this.service.findEndeavorProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Reward, {
    nullable: true,
    name: "reward",
  })
  async getReward(@graphql.Parent() parent: Endeavor): Promise<Reward | null> {
    const result = await this.service.getReward(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
