/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EndeavorService } from "../endeavor.service";
import { EndeavorCreateInput } from "./EndeavorCreateInput";
import { Endeavor } from "./Endeavor";
import { EndeavorFindManyArgs } from "./EndeavorFindManyArgs";
import { EndeavorWhereUniqueInput } from "./EndeavorWhereUniqueInput";
import { EndeavorUpdateInput } from "./EndeavorUpdateInput";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { ProgressWhereUniqueInput } from "../../progress/base/ProgressWhereUniqueInput";
import { EndeavorProgressFindManyArgs } from "../../endeavorProgress/base/EndeavorProgressFindManyArgs";
import { EndeavorProgress } from "../../endeavorProgress/base/EndeavorProgress";
import { EndeavorProgressWhereUniqueInput } from "../../endeavorProgress/base/EndeavorProgressWhereUniqueInput";

export class EndeavorControllerBase {
  constructor(protected readonly service: EndeavorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Endeavor })
  async createEndeavor(
    @common.Body() data: EndeavorCreateInput
  ): Promise<Endeavor> {
    return await this.service.createEndeavor({
      data: {
        ...data,

        reward: data.reward
          ? {
              connect: data.reward,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        dueDate: true,

        reward: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Endeavor] })
  @ApiNestedQuery(EndeavorFindManyArgs)
  async endeavors(@common.Req() request: Request): Promise<Endeavor[]> {
    const args = plainToClass(EndeavorFindManyArgs, request.query);
    return this.service.endeavors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        dueDate: true,

        reward: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Endeavor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async endeavor(
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<Endeavor | null> {
    const result = await this.service.endeavor({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        dueDate: true,

        reward: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Endeavor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEndeavor(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() data: EndeavorUpdateInput
  ): Promise<Endeavor | null> {
    try {
      return await this.service.updateEndeavor({
        where: params,
        data: {
          ...data,

          reward: data.reward
            ? {
                connect: data.reward,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
          dueDate: true,

          reward: {
            select: {
              id: true,
            },
          },

          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Endeavor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEndeavor(
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<Endeavor | null> {
    try {
      return await this.service.deleteEndeavor({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
          dueDate: true,

          reward: {
            select: {
              id: true,
            },
          },

          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/progresses")
  @ApiNestedQuery(ProgressFindManyArgs)
  async findProgresses(
    @common.Req() request: Request,
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<Progress[]> {
    const query = plainToClass(ProgressFindManyArgs, request.query);
    const results = await this.service.findProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        blueGemsEarned: true,
        redGemsEarned: true,
        purpleGemsEarned: true,

        kid: {
          select: {
            id: true,
          },
        },

        endeavor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/progresses")
  async connectProgresses(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        connect: body,
      },
    };
    await this.service.updateEndeavor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/progresses")
  async updateProgresses(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        set: body,
      },
    };
    await this.service.updateEndeavor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/progresses")
  async disconnectProgresses(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        disconnect: body,
      },
    };
    await this.service.updateEndeavor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/endeavorProgresses")
  @ApiNestedQuery(EndeavorProgressFindManyArgs)
  async findEndeavorProgresses(
    @common.Req() request: Request,
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<EndeavorProgress[]> {
    const query = plainToClass(EndeavorProgressFindManyArgs, request.query);
    const results = await this.service.findEndeavorProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        blueGemsEarned: true,
        redGemsEarned: true,
        purpleGemsEarned: true,

        kid: {
          select: {
            id: true,
          },
        },

        endeavor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/endeavorProgresses")
  async connectEndeavorProgresses(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() body: EndeavorProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      endeavorProgresses: {
        connect: body,
      },
    };
    await this.service.updateEndeavor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/endeavorProgresses")
  async updateEndeavorProgresses(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() body: EndeavorProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      endeavorProgresses: {
        set: body,
      },
    };
    await this.service.updateEndeavor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/endeavorProgresses")
  async disconnectEndeavorProgresses(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() body: EndeavorProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      endeavorProgresses: {
        disconnect: body,
      },
    };
    await this.service.updateEndeavor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
