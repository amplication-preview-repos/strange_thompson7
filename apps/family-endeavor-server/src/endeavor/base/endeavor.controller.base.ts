/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EndeavorService } from "../endeavor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EndeavorCreateInput } from "./EndeavorCreateInput";
import { Endeavor } from "./Endeavor";
import { EndeavorFindManyArgs } from "./EndeavorFindManyArgs";
import { EndeavorWhereUniqueInput } from "./EndeavorWhereUniqueInput";
import { EndeavorUpdateInput } from "./EndeavorUpdateInput";
import { EndeavorProgressFindManyArgs } from "../../endeavorProgress/base/EndeavorProgressFindManyArgs";
import { EndeavorProgress } from "../../endeavorProgress/base/EndeavorProgress";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EndeavorControllerBase {
  constructor(
    protected readonly service: EndeavorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Endeavor })
  @nestAccessControl.UseRoles({
    resource: "Endeavor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEndeavor(
    @common.Body() data: EndeavorCreateInput
  ): Promise<Endeavor> {
    return await this.service.createEndeavor({
      data: {
        ...data,

        reward: data.reward
          ? {
              connect: data.reward,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        dueDate: true,

        reward: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Endeavor] })
  @ApiNestedQuery(EndeavorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Endeavor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async endeavors(@common.Req() request: Request): Promise<Endeavor[]> {
    const args = plainToClass(EndeavorFindManyArgs, request.query);
    return this.service.endeavors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        dueDate: true,

        reward: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Endeavor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Endeavor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async endeavor(
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<Endeavor | null> {
    const result = await this.service.endeavor({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        dueDate: true,

        reward: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Endeavor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Endeavor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEndeavor(
    @common.Param() params: EndeavorWhereUniqueInput,
    @common.Body() data: EndeavorUpdateInput
  ): Promise<Endeavor | null> {
    try {
      return await this.service.updateEndeavor({
        where: params,
        data: {
          ...data,

          reward: data.reward
            ? {
                connect: data.reward,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
          dueDate: true,

          reward: {
            select: {
              id: true,
            },
          },

          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Endeavor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Endeavor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEndeavor(
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<Endeavor | null> {
    try {
      return await this.service.deleteEndeavor({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
          dueDate: true,

          reward: {
            select: {
              id: true,
            },
          },

          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/endeavorProgresses")
  @ApiNestedQuery(EndeavorProgressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EndeavorProgress",
    action: "read",
    possession: "any",
  })
  async findEndeavorProgresses(
    @common.Req() request: Request,
    @common.Param() params: EndeavorWhereUniqueInput
  ): Promise<EndeavorProgress[]> {
    const query = plainToClass(EndeavorProgressFindManyArgs, request.query);
    const results = await this.service.findEndeavorProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        blueGemsEarned: true,
        redGemsEarned: true,
        purpleGemsEarned: true,

        kid: {
          select: {
            id: true,
          },
        },

        endeavor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }
}
