/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Endeavor as PrismaEndeavor,
  EndeavorProgress as PrismaEndeavorProgress,
  Reward as PrismaReward,
} from "@prisma/client";

export class EndeavorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EndeavorCountArgs, "select">): Promise<number> {
    return this.prisma.endeavor.count(args);
  }

  async endeavors(
    args: Prisma.EndeavorFindManyArgs
  ): Promise<PrismaEndeavor[]> {
    return this.prisma.endeavor.findMany(args);
  }
  async endeavor(
    args: Prisma.EndeavorFindUniqueArgs
  ): Promise<PrismaEndeavor | null> {
    return this.prisma.endeavor.findUnique(args);
  }
  async createEndeavor(
    args: Prisma.EndeavorCreateArgs
  ): Promise<PrismaEndeavor> {
    return this.prisma.endeavor.create(args);
  }
  async updateEndeavor(
    args: Prisma.EndeavorUpdateArgs
  ): Promise<PrismaEndeavor> {
    return this.prisma.endeavor.update(args);
  }
  async deleteEndeavor(
    args: Prisma.EndeavorDeleteArgs
  ): Promise<PrismaEndeavor> {
    return this.prisma.endeavor.delete(args);
  }

  async findEndeavorProgresses(
    parentId: string,
    args: Prisma.EndeavorProgressFindManyArgs
  ): Promise<PrismaEndeavorProgress[]> {
    return this.prisma.endeavor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .endeavorProgresses(args);
  }

  async getReward(parentId: string): Promise<PrismaReward | null> {
    return this.prisma.endeavor
      .findUnique({
        where: { id: parentId },
      })
      .reward();
  }
}
