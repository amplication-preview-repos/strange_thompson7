/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Parent as PrismaParent,
  Kid as PrismaKid,
} from "@prisma/client";

export class ParentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ParentCountArgs, "select">): Promise<number> {
    return this.prisma.parent.count(args);
  }

  async parents(args: Prisma.ParentFindManyArgs): Promise<PrismaParent[]> {
    return this.prisma.parent.findMany(args);
  }
  async parent(
    args: Prisma.ParentFindUniqueArgs
  ): Promise<PrismaParent | null> {
    return this.prisma.parent.findUnique(args);
  }
  async createParent(args: Prisma.ParentCreateArgs): Promise<PrismaParent> {
    return this.prisma.parent.create(args);
  }
  async updateParent(args: Prisma.ParentUpdateArgs): Promise<PrismaParent> {
    return this.prisma.parent.update(args);
  }
  async deleteParent(args: Prisma.ParentDeleteArgs): Promise<PrismaParent> {
    return this.prisma.parent.delete(args);
  }

  async findKids(
    parentId: string,
    args: Prisma.KidFindManyArgs
  ): Promise<PrismaKid[]> {
    return this.prisma.parent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kids(args);
  }
}
