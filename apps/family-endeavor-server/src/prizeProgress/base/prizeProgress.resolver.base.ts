/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PrizeProgress } from "./PrizeProgress";
import { PrizeProgressFindManyArgs } from "./PrizeProgressFindManyArgs";
import { PrizeProgressFindUniqueArgs } from "./PrizeProgressFindUniqueArgs";
import { Kid } from "../../kid/base/Kid";
import { Prize } from "../../prize/base/Prize";
import { PrizeProgressService } from "../prizeProgress.service";
@graphql.Resolver(() => PrizeProgress)
export class PrizeProgressResolverBase {
  constructor(protected readonly service: PrizeProgressService) {}

  @graphql.Query(() => [PrizeProgress])
  async prizeProgresses(
    @graphql.Args() args: PrizeProgressFindManyArgs
  ): Promise<PrizeProgress[]> {
    return this.service.prizeProgresses(args);
  }

  @graphql.Query(() => PrizeProgress, { nullable: true })
  async prizeProgress(
    @graphql.Args() args: PrizeProgressFindUniqueArgs
  ): Promise<PrizeProgress | null> {
    const result = await this.service.prizeProgress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Kid, {
    nullable: true,
    name: "kid",
  })
  async getKid(@graphql.Parent() parent: PrizeProgress): Promise<Kid | null> {
    const result = await this.service.getKid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Prize, {
    nullable: true,
    name: "prize",
  })
  async getPrize(
    @graphql.Parent() parent: PrizeProgress
  ): Promise<Prize | null> {
    const result = await this.service.getPrize(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
