/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrizeProgressService } from "../prizeProgress.service";
import { PrizeProgressCreateInput } from "./PrizeProgressCreateInput";
import { PrizeProgress } from "./PrizeProgress";
import { PrizeProgressFindManyArgs } from "./PrizeProgressFindManyArgs";
import { PrizeProgressWhereUniqueInput } from "./PrizeProgressWhereUniqueInput";
import { PrizeProgressUpdateInput } from "./PrizeProgressUpdateInput";

export class PrizeProgressControllerBase {
  constructor(protected readonly service: PrizeProgressService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PrizeProgress })
  async createPrizeProgress(
    @common.Body() data: PrizeProgressCreateInput
  ): Promise<PrizeProgress> {
    return await this.service.createPrizeProgress({
      data: {
        ...data,

        kid: data.kid
          ? {
              connect: data.kid,
            }
          : undefined,

        prize: data.prize
          ? {
              connect: data.prize,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        datePurchased: true,

        kid: {
          select: {
            id: true,
          },
        },

        prize: {
          select: {
            id: true,
          },
        },

        status: true,
        dateRedeemed: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PrizeProgress] })
  @ApiNestedQuery(PrizeProgressFindManyArgs)
  async prizeProgresses(
    @common.Req() request: Request
  ): Promise<PrizeProgress[]> {
    const args = plainToClass(PrizeProgressFindManyArgs, request.query);
    return this.service.prizeProgresses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        datePurchased: true,

        kid: {
          select: {
            id: true,
          },
        },

        prize: {
          select: {
            id: true,
          },
        },

        status: true,
        dateRedeemed: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PrizeProgress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async prizeProgress(
    @common.Param() params: PrizeProgressWhereUniqueInput
  ): Promise<PrizeProgress | null> {
    const result = await this.service.prizeProgress({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        datePurchased: true,

        kid: {
          select: {
            id: true,
          },
        },

        prize: {
          select: {
            id: true,
          },
        },

        status: true,
        dateRedeemed: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PrizeProgress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrizeProgress(
    @common.Param() params: PrizeProgressWhereUniqueInput,
    @common.Body() data: PrizeProgressUpdateInput
  ): Promise<PrizeProgress | null> {
    try {
      return await this.service.updatePrizeProgress({
        where: params,
        data: {
          ...data,

          kid: data.kid
            ? {
                connect: data.kid,
              }
            : undefined,

          prize: data.prize
            ? {
                connect: data.prize,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          datePurchased: true,

          kid: {
            select: {
              id: true,
            },
          },

          prize: {
            select: {
              id: true,
            },
          },

          status: true,
          dateRedeemed: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PrizeProgress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrizeProgress(
    @common.Param() params: PrizeProgressWhereUniqueInput
  ): Promise<PrizeProgress | null> {
    try {
      return await this.service.deletePrizeProgress({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          datePurchased: true,

          kid: {
            select: {
              id: true,
            },
          },

          prize: {
            select: {
              id: true,
            },
          },

          status: true,
          dateRedeemed: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
