/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { KidService } from "../kid.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { KidCreateInput } from "./KidCreateInput";
import { Kid } from "./Kid";
import { KidFindManyArgs } from "./KidFindManyArgs";
import { KidWhereUniqueInput } from "./KidWhereUniqueInput";
import { KidUpdateInput } from "./KidUpdateInput";
import { EndeavorProgressFindManyArgs } from "../../endeavorProgress/base/EndeavorProgressFindManyArgs";
import { EndeavorProgress } from "../../endeavorProgress/base/EndeavorProgress";
import { EndeavorProgressWhereUniqueInput } from "../../endeavorProgress/base/EndeavorProgressWhereUniqueInput";
import { PrizeProgressFindManyArgs } from "../../prizeProgress/base/PrizeProgressFindManyArgs";
import { PrizeProgress } from "../../prizeProgress/base/PrizeProgress";
import { PrizeProgressWhereUniqueInput } from "../../prizeProgress/base/PrizeProgressWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class KidControllerBase {
  constructor(
    protected readonly service: KidService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Kid })
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createKid(@common.Body() data: KidCreateInput): Promise<Kid> {
    return await this.service.createKid({
      data: {
        ...data,

        parent: data.parent
          ? {
              connect: data.parent,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        profilePicture: true,
        name: true,
        yearOfBirth: true,

        parent: {
          select: {
            id: true,
          },
        },

        gender: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Kid] })
  @ApiNestedQuery(KidFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async kids(@common.Req() request: Request): Promise<Kid[]> {
    const args = plainToClass(KidFindManyArgs, request.query);
    return this.service.kids({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        profilePicture: true,
        name: true,
        yearOfBirth: true,

        parent: {
          select: {
            id: true,
          },
        },

        gender: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Kid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async kid(@common.Param() params: KidWhereUniqueInput): Promise<Kid | null> {
    const result = await this.service.kid({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        profilePicture: true,
        name: true,
        yearOfBirth: true,

        parent: {
          select: {
            id: true,
          },
        },

        gender: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Kid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateKid(
    @common.Param() params: KidWhereUniqueInput,
    @common.Body() data: KidUpdateInput
  ): Promise<Kid | null> {
    try {
      return await this.service.updateKid({
        where: params,
        data: {
          ...data,

          parent: data.parent
            ? {
                connect: data.parent,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          profilePicture: true,
          name: true,
          yearOfBirth: true,

          parent: {
            select: {
              id: true,
            },
          },

          gender: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Kid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteKid(
    @common.Param() params: KidWhereUniqueInput
  ): Promise<Kid | null> {
    try {
      return await this.service.deleteKid({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          profilePicture: true,
          name: true,
          yearOfBirth: true,

          parent: {
            select: {
              id: true,
            },
          },

          gender: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/endeavorProgresses")
  @ApiNestedQuery(EndeavorProgressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EndeavorProgress",
    action: "read",
    possession: "any",
  })
  async findEndeavorProgresses(
    @common.Req() request: Request,
    @common.Param() params: KidWhereUniqueInput
  ): Promise<EndeavorProgress[]> {
    const query = plainToClass(EndeavorProgressFindManyArgs, request.query);
    const results = await this.service.findEndeavorProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        blueGemsEarned: true,
        redGemsEarned: true,
        purpleGemsEarned: true,

        kid: {
          select: {
            id: true,
          },
        },

        endeavor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Patch("/:id/endeavorProgresses")
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "update",
    possession: "any",
  })
  async updateEndeavorProgresses(
    @common.Param() params: KidWhereUniqueInput,
    @common.Body() body: EndeavorProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      endeavorProgresses: {
        set: body,
      },
    };
    await this.service.updateKid({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/prizeProgresses")
  @ApiNestedQuery(PrizeProgressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PrizeProgress",
    action: "read",
    possession: "any",
  })
  async findPrizeProgresses(
    @common.Req() request: Request,
    @common.Param() params: KidWhereUniqueInput
  ): Promise<PrizeProgress[]> {
    const query = plainToClass(PrizeProgressFindManyArgs, request.query);
    const results = await this.service.findPrizeProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        datePurchased: true,

        kid: {
          select: {
            id: true,
          },
        },

        prize: {
          select: {
            id: true,
          },
        },

        status: true,
        dateRedeemed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Patch("/:id/prizeProgresses")
  @nestAccessControl.UseRoles({
    resource: "Kid",
    action: "update",
    possession: "any",
  })
  async updatePrizeProgresses(
    @common.Param() params: KidWhereUniqueInput,
    @common.Body() body: PrizeProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prizeProgresses: {
        set: body,
      },
    };
    await this.service.updateKid({
      where: params,
      data,
      select: { id: true },
    });
  }
}
