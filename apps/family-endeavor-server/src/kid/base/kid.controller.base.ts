/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KidService } from "../kid.service";
import { KidCreateInput } from "./KidCreateInput";
import { Kid } from "./Kid";
import { KidFindManyArgs } from "./KidFindManyArgs";
import { KidWhereUniqueInput } from "./KidWhereUniqueInput";
import { KidUpdateInput } from "./KidUpdateInput";
import { EndeavorProgressFindManyArgs } from "../../endeavorProgress/base/EndeavorProgressFindManyArgs";
import { EndeavorProgress } from "../../endeavorProgress/base/EndeavorProgress";
import { EndeavorProgressWhereUniqueInput } from "../../endeavorProgress/base/EndeavorProgressWhereUniqueInput";
import { PrizeProgressFindManyArgs } from "../../prizeProgress/base/PrizeProgressFindManyArgs";
import { PrizeProgress } from "../../prizeProgress/base/PrizeProgress";
import { PrizeProgressWhereUniqueInput } from "../../prizeProgress/base/PrizeProgressWhereUniqueInput";

export class KidControllerBase {
  constructor(protected readonly service: KidService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Kid })
  async createKid(@common.Body() data: KidCreateInput): Promise<Kid> {
    return await this.service.createKid({
      data: {
        ...data,

        parent: data.parent
          ? {
              connect: data.parent,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        profilePicture: true,
        name: true,
        yearOfBirth: true,

        parent: {
          select: {
            id: true,
          },
        },

        gender: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Kid] })
  @ApiNestedQuery(KidFindManyArgs)
  async kids(@common.Req() request: Request): Promise<Kid[]> {
    const args = plainToClass(KidFindManyArgs, request.query);
    return this.service.kids({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        profilePicture: true,
        name: true,
        yearOfBirth: true,

        parent: {
          select: {
            id: true,
          },
        },

        gender: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Kid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async kid(@common.Param() params: KidWhereUniqueInput): Promise<Kid | null> {
    const result = await this.service.kid({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        profilePicture: true,
        name: true,
        yearOfBirth: true,

        parent: {
          select: {
            id: true,
          },
        },

        gender: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Kid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKid(
    @common.Param() params: KidWhereUniqueInput,
    @common.Body() data: KidUpdateInput
  ): Promise<Kid | null> {
    try {
      return await this.service.updateKid({
        where: params,
        data: {
          ...data,

          parent: data.parent
            ? {
                connect: data.parent,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          profilePicture: true,
          name: true,
          yearOfBirth: true,

          parent: {
            select: {
              id: true,
            },
          },

          gender: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Kid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKid(
    @common.Param() params: KidWhereUniqueInput
  ): Promise<Kid | null> {
    try {
      return await this.service.deleteKid({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          profilePicture: true,
          name: true,
          yearOfBirth: true,

          parent: {
            select: {
              id: true,
            },
          },

          gender: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/endeavorProgresses")
  @ApiNestedQuery(EndeavorProgressFindManyArgs)
  async findEndeavorProgresses(
    @common.Req() request: Request,
    @common.Param() params: KidWhereUniqueInput
  ): Promise<EndeavorProgress[]> {
    const query = plainToClass(EndeavorProgressFindManyArgs, request.query);
    const results = await this.service.findEndeavorProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        blueGemsEarned: true,
        redGemsEarned: true,
        purpleGemsEarned: true,

        kid: {
          select: {
            id: true,
          },
        },

        endeavor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Patch("/:id/endeavorProgresses")
  async updateEndeavorProgresses(
    @common.Param() params: KidWhereUniqueInput,
    @common.Body() body: EndeavorProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      endeavorProgresses: {
        set: body,
      },
    };
    await this.service.updateKid({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/prizeProgresses")
  @ApiNestedQuery(PrizeProgressFindManyArgs)
  async findPrizeProgresses(
    @common.Req() request: Request,
    @common.Param() params: KidWhereUniqueInput
  ): Promise<PrizeProgress[]> {
    const query = plainToClass(PrizeProgressFindManyArgs, request.query);
    const results = await this.service.findPrizeProgresses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        datePurchased: true,

        kid: {
          select: {
            id: true,
          },
        },

        prize: {
          select: {
            id: true,
          },
        },

        status: true,
        dateRedeemed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Patch("/:id/prizeProgresses")
  async updatePrizeProgresses(
    @common.Param() params: KidWhereUniqueInput,
    @common.Body() body: PrizeProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prizeProgresses: {
        set: body,
      },
    };
    await this.service.updateKid({
      where: params,
      data,
      select: { id: true },
    });
  }
}
