/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Kid } from "./Kid";
import { KidCountArgs } from "./KidCountArgs";
import { KidFindManyArgs } from "./KidFindManyArgs";
import { KidFindUniqueArgs } from "./KidFindUniqueArgs";
import { CreateKidArgs } from "./CreateKidArgs";
import { UpdateKidArgs } from "./UpdateKidArgs";
import { DeleteKidArgs } from "./DeleteKidArgs";
import { EndeavorProgressFindManyArgs } from "../../endeavorProgress/base/EndeavorProgressFindManyArgs";
import { EndeavorProgress } from "../../endeavorProgress/base/EndeavorProgress";
import { PrizeProgressFindManyArgs } from "../../prizeProgress/base/PrizeProgressFindManyArgs";
import { PrizeProgress } from "../../prizeProgress/base/PrizeProgress";
import { Parent } from "../../parent/base/Parent";
import { KidService } from "../kid.service";
@graphql.Resolver(() => Kid)
export class KidResolverBase {
  constructor(protected readonly service: KidService) {}

  async _kidsMeta(
    @graphql.Args() args: KidCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Kid])
  async kids(@graphql.Args() args: KidFindManyArgs): Promise<Kid[]> {
    return this.service.kids(args);
  }

  @graphql.Query(() => Kid, { nullable: true })
  async kid(@graphql.Args() args: KidFindUniqueArgs): Promise<Kid | null> {
    const result = await this.service.kid(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Kid)
  async createKid(@graphql.Args() args: CreateKidArgs): Promise<Kid> {
    return await this.service.createKid({
      ...args,
      data: {
        ...args.data,

        parent: args.data.parent
          ? {
              connect: args.data.parent,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Kid)
  async updateKid(@graphql.Args() args: UpdateKidArgs): Promise<Kid | null> {
    try {
      return await this.service.updateKid({
        ...args,
        data: {
          ...args.data,

          parent: args.data.parent
            ? {
                connect: args.data.parent,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Kid)
  async deleteKid(@graphql.Args() args: DeleteKidArgs): Promise<Kid | null> {
    try {
      return await this.service.deleteKid(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EndeavorProgress], {
    name: "endeavorProgresses",
  })
  async findEndeavorProgresses(
    @graphql.Parent() parent: Kid,
    @graphql.Args() args: EndeavorProgressFindManyArgs
  ): Promise<EndeavorProgress[]> {
    const results = await this.service.findEndeavorProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PrizeProgress], { name: "prizeProgresses" })
  async findPrizeProgresses(
    @graphql.Parent() parent: Kid,
    @graphql.Args() args: PrizeProgressFindManyArgs
  ): Promise<PrizeProgress[]> {
    const results = await this.service.findPrizeProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Parent, {
    nullable: true,
    name: "parent",
  })
  async getParent(@graphql.Parent() parent: Kid): Promise<Parent | null> {
    const result = await this.service.getParent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
